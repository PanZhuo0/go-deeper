syntax = "v1"

info (
	title: "go-zero 学习"
)

// 定义类型
type SignupRequest {
	UserName   string `json:"username"`
	Password   string `json:"password"`
	RePassword string `json:"re_password"`
	Gender     int    `json:"gender,option=0|1|2,default=0"`
}

type SignupResponse {
	Message string `json:"message"`
}

@server (
	prefix: /api
)
service user-api {
	@handler SignupHandler
	get /user/signup (SignupRequest) returns (SignupResponse)

	@handler LoginHandler
	post /user/login (LoginRequest) returns (LoginResponse)
}

@server (
	prefix: /api
	// jwt:        Auth //增加jwt鉴权
	middleware: Cost //增加自定义中间件(路由中间件)
)

service user-api {
	@handler DetailHandler
	get /user/info (UserInfoRequest) returns (UserInfoResponse)
//post /user/info(UserInfoRequest)returns(UserInfoResponse)
}

// 登录
type LoginRequest {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginResponse {
	Message string `json:"message"`
	// 增加部分
	AccessToken  string `json:"accessToken"`
	AccessExpire string `json:"accessExpire"`
	RefreshAfter string `json:"refreshAfter"`
}

/*
// 用户详情
Addition: 用户详情接口需要登录之后才能访问，需要认证auth
用户成功登录之后--> Token JWT  -->前端代码会把Token保存在浏览器中，后续每一次请求都会带上这个token
后端需要鉴权的接口，将会对请求进行鉴权,进行解析
	-解析成功,登录的用户
	-解析失败,未登录/超时

	refleshToken:可选

如何生成Token?
如何鉴定Token?
*/
type UserInfoRequest {
	Username string `form:"username"`
}

type UserInfoResponse {
	Username string `json:"username"`
	Age      int    `json:"age"`
	Gender   int64  `json:"gender"`
}

