// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: 1.proto

package homework

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HomeWork_Add_FullMethodName = "/pb.HomeWork/Add"
)

// HomeWorkClient is the client API for HomeWork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeWorkClient interface {
	Add(ctx context.Context, in *HomeWokrRequest, opts ...grpc.CallOption) (*HomeWorkResponse, error)
}

type homeWorkClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeWorkClient(cc grpc.ClientConnInterface) HomeWorkClient {
	return &homeWorkClient{cc}
}

func (c *homeWorkClient) Add(ctx context.Context, in *HomeWokrRequest, opts ...grpc.CallOption) (*HomeWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeWorkResponse)
	err := c.cc.Invoke(ctx, HomeWork_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeWorkServer is the server API for HomeWork service.
// All implementations must embed UnimplementedHomeWorkServer
// for forward compatibility
type HomeWorkServer interface {
	Add(context.Context, *HomeWokrRequest) (*HomeWorkResponse, error)
	mustEmbedUnimplementedHomeWorkServer()
}

// UnimplementedHomeWorkServer must be embedded to have forward compatible implementations.
type UnimplementedHomeWorkServer struct {
}

func (UnimplementedHomeWorkServer) Add(context.Context, *HomeWokrRequest) (*HomeWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedHomeWorkServer) mustEmbedUnimplementedHomeWorkServer() {}

// UnsafeHomeWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeWorkServer will
// result in compilation errors.
type UnsafeHomeWorkServer interface {
	mustEmbedUnimplementedHomeWorkServer()
}

func RegisterHomeWorkServer(s grpc.ServiceRegistrar, srv HomeWorkServer) {
	s.RegisterService(&HomeWork_ServiceDesc, srv)
}

func _HomeWork_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeWokrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeWorkServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeWork_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeWorkServer).Add(ctx, req.(*HomeWokrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeWork_ServiceDesc is the grpc.ServiceDesc for HomeWork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeWork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HomeWork",
	HandlerType: (*HomeWorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _HomeWork_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "1.proto",
}
