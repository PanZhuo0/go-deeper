// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: bi.proto

package bi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Gretter_BiTest_FullMethodName = "/Gretter/bi_test"
)

// GretterClient is the client API for Gretter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GretterClient interface {
	BiTest(ctx context.Context, opts ...grpc.CallOption) (Gretter_BiTestClient, error)
}

type gretterClient struct {
	cc grpc.ClientConnInterface
}

func NewGretterClient(cc grpc.ClientConnInterface) GretterClient {
	return &gretterClient{cc}
}

func (c *gretterClient) BiTest(ctx context.Context, opts ...grpc.CallOption) (Gretter_BiTestClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gretter_ServiceDesc.Streams[0], Gretter_BiTest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gretterBiTestClient{ClientStream: stream}
	return x, nil
}

type Gretter_BiTestClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type gretterBiTestClient struct {
	grpc.ClientStream
}

func (x *gretterBiTestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gretterBiTestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GretterServer is the server API for Gretter service.
// All implementations must embed UnimplementedGretterServer
// for forward compatibility
type GretterServer interface {
	BiTest(Gretter_BiTestServer) error
	mustEmbedUnimplementedGretterServer()
}

// UnimplementedGretterServer must be embedded to have forward compatible implementations.
type UnimplementedGretterServer struct {
}

func (UnimplementedGretterServer) BiTest(Gretter_BiTestServer) error {
	return status.Errorf(codes.Unimplemented, "method BiTest not implemented")
}
func (UnimplementedGretterServer) mustEmbedUnimplementedGretterServer() {}

// UnsafeGretterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GretterServer will
// result in compilation errors.
type UnsafeGretterServer interface {
	mustEmbedUnimplementedGretterServer()
}

func RegisterGretterServer(s grpc.ServiceRegistrar, srv GretterServer) {
	s.RegisterService(&Gretter_ServiceDesc, srv)
}

func _Gretter_BiTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GretterServer).BiTest(&gretterBiTestServer{ServerStream: stream})
}

type Gretter_BiTestServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gretterBiTestServer struct {
	grpc.ServerStream
}

func (x *gretterBiTestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gretterBiTestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gretter_ServiceDesc is the grpc.ServiceDesc for Gretter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gretter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gretter",
	HandlerType: (*GretterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "bi_test",
			Handler:       _Gretter_BiTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bi.proto",
}
